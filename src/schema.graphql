# import Color from './generated/prisma.graphql'

type Query {
  colors(where: ColorWhereInput, orderBy: ColorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, filter: String): [Color]!
  colorsConnection(where: ColorWhereInput, orderBy: ColorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, filter: String): ColorConnection!
  test(where: ColorWhereInput, orderBy: ColorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int, filter: String): ColorConnection!
  randomColor: Color!
  color(id: ID!): Color
  feed(filter: String, skip: Int, first: Int, orderBy: ColorOrderByInput): Feed!
}

type Mutation {
  createColor(data: ColorCreateInput!): Color!
}

input ColorCreateInput {
  id: ID
  color_code: String!
}

type Feed {
  colors: [Color!]!
  count: Int!
}